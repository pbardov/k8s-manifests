name: Apply Kubernetes manifests

on:
  workflow_dispatch:

jobs:
  sync-imagepull-secrets:
    runs-on: ubuntu-latest

    steps:
      # Получаем код
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install rsync and SSH client
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y rsync openssh-client

      - name: Set up SSH
        env:
          REMOTE_HOST: ${{ vars.K8S_HOST }}
          REMOTE_PORT: ${{ vars.K8S_PORT }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          if [ -z $REMOTE_PORT ]; then
            REMOTE_PORT="22"
          fi
          ssh-keyscan -H $REMOTE_HOST -p $REMOTE_PORT >> ~/.ssh/known_hosts

      # Устанавливаем kubectl
      - name: Install kubectl
        run: |
          # Download latest kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

      # Применяем манифесты kubernetes
      - name: Apply Kubernetes manifests
        env:
          REMOTE_USER: ${{ vars.K8S_USER }}
          REMOTE_HOST: ${{ vars.K8S_HOST }}
          REMOTE_PORT: ${{ vars.K8S_PORT }}
          NAMESPACE: ${{ vars.K8S_NAMESPACE }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          set -euo pipefail
          
          REMOTE_PORT="${REMOTE_PORT:-"22"}"
          NAMESPACE="${NAMESPACE:-$(yq eval '.metadata.name' namespace.yaml)}"
          
          # Проверка обязательных переменных
          missing_vars=0
          
          check_var() {
            local var_name="$1"
            local var_value="$2"
            local var_source="$3"
          
            if [ -z "$var_value" ]; then
              echo "❌ Отсутствует обязательная переменная ${var_source}.${var_name}"
              missing_vars=$((missing_vars + 1))
            else
              echo "✅ Переменная ${var_source}.${var_name} установлена"
            fi
          }
          
          # Проверка переменных окружения
          check_var "K8S_HOST" "$REMOTE_HOST" "vars"
          check_var "K8S_USER" "$REMOTE_USER" "vars"
          check_var "K8S_PORT" "$REMOTE_PORT" "vars"
          check_var "K8S_NAMESPACE" "$NAMESPACE" "vars"
          check_var "DOCKER_USERNAME" "$DOCKER_USERNAME" "secrets"
          check_var "DOCKER_PASSWORD" "$DOCKER_PASSWORD" "secrets"
          
          if [ $missing_vars -gt 0 ]; then
            echo "❌ Найдено $missing_vars отсутствующих обязательных переменных. Завершение работы."
            exit 1
          fi
          
          echo "✅ Все обязательные переменные установлены. Продолжаем выполнение."
          
          MANIFEST=$(kubectl create secret docker-registry regcred \
          -n "$NAMESPACE" \
          --docker-server='${{ vars.DOCKER_REGISTRY }}' \
          --docker-username="$DOCKER_USERNAME" \
          --docker-password="$DOCKER_PASSWORD" \
          --dry-run=client -o yaml)
          echo "$MANIFEST" | ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "kubectl apply -f - "
          ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "kubectl patch sa default \
          -n '$NAMESPACE' \
          -p '{\"imagePullSecrets\":[{\"name\":\"regcred\"}]}'"
