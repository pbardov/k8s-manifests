name: Sync ConfigMaps to Kubernetes

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - '.configmaps.yaml'
      - '.secrets.yaml'
      - '.synck8s.yaml'
      - '.gitea/workflows/sync-k8s-cm-secrets.yaml'

jobs:
  sync-k8s-cm-secrets:
    runs-on: ubuntu-latest

    steps:
      # Получаем код
      - name: Checkout repository
        uses: actions/checkout@v2

      # Устанавливаем yq и jq для парсинга YAML/JSON
      - name: Install dependencies
        run: |
          set -euo pipefail
          # yq v4
          YQ_VERSION=v4.45.4
          wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64
          chmod +x /usr/local/bin/yq
          
          # jq
          apt-get update -qq && apt-get install -y -qq jq

      - name: Install rsync and SSH client
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y rsync openssh-client

      - name: Set up SSH
        env:
          REMOTE_HOST: ${{ vars.K8S_HOST }}
          REMOTE_PORT: ${{ vars.K8S_PORT }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          if [ -z $REMOTE_PORT ]; then
            REMOTE_PORT="22"
          fi
          ssh-keyscan -H $REMOTE_HOST -p $REMOTE_PORT >> ~/.ssh/known_hosts

      # Устанавливаем kubectl
      - name: Install kubectl
        run: |
          set -euo pipefail
          # Download latest kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

      # Читаем конфиги
      - name: Parse configs
        run: |
          set -euo pipefail
          echo "$(yq e -o=json '.' .synck8s.yaml || echo "")" > .synck8s.json
          echo "$(yq e -o=json '.' .configmaps.yaml || echo "[]")" > .configmaps.json
          echo "$(yq e -o=json '.' .secrets.yaml || echo "[]")" > .secrets.json
          
          secrets="$(jq -r '.secrets // []' .synck8s.json | jq -r -s 'add | unique_by(.name)' .secrets.json - )"
          configmaps="$(jq -r '.configMaps // []' .synck8s.json | jq -r -s 'add | unique_by(.name)' .configmaps.json - )"
          jq -n -r --argjson s "$secrets" --argjson c "$configmaps" '{secrets: $s, configMaps: $c}' > sync-job.json

      # Парсим список и создаём Kubernetes ресурсы
      - name: Create Kubernetes resources
        env:
          SECRETS_JSON: ${{ toJson(secrets) }}
          VARS_JSON: ${{ toJson(vars) }}
          REMOTE_USER: ${{ vars.K8S_USER }}
          REMOTE_HOST: ${{ vars.K8S_HOST }}
          REMOTE_PORT: ${{ vars.K8S_PORT }}
          NAMESPACE: ${{ vars.K8S_NAMESPACE }}
        run: |
          set -euo pipefail

          REMOTE_PORT="${REMOTE_PORT:-"22"}"
          NAMESPACE="${NAMESPACE:-$(yq eval '.metadata.name' namespace.yaml)}"
          
          # Проверка обязательных переменных
          missing_vars=0
          
          check_var() {
            local var_name="$1"
            local var_value="$2"
            local var_source="$3"
          
            if [ -z "$var_value" ]; then
              echo "❌ Отсутствует обязательная переменная ${var_source}.${var_name}"
              missing_vars=$((missing_vars + 1))
            else
              echo "✅ Переменная ${var_source}.${var_name} установлена"
            fi
          }
          
          # Проверка переменных окружения
          check_var "K8S_HOST" "$REMOTE_HOST" "vars"
          check_var "K8S_USER" "$REMOTE_USER" "vars"
          check_var "K8S_PORT" "$REMOTE_PORT" "vars"
          check_var "K8S_NAMESPACE" "$NAMESPACE" "vars"
          
          if [ $missing_vars -gt 0 ]; then
            echo "❌ Найдено $missing_vars отсутствующих обязательных переменных. Завершение работы."
            exit 1
          fi
          
          echo "✅ Все обязательные переменные установлены. Продолжаем выполнение."

          mkdir -p .secrets
          chmod 755 .secrets

          process_entries() {
              SECTION="$1"
              case "$SECTION" in
                  "secrets")
                      OP="secret generic" ;;
                  "configMaps")
                      OP="configmap" ;;
                  *)
                      echo "Unknown section type $SECTION"
                      exit 0 ;;
              esac

              # Итерируемся по каждому объекту
              while read -r entry; do
                  name=$(echo "$entry"    | jq -r '.name')
                  echo "🔐 Processing: $OP $name"

                  args=(create $OP "$name" -n "$NAMESPACE")

                  mkdir -p ".secrets/$name"
                  chmod 755 ".secrets/$name"

                  items=""

                  if [ -n "$(echo "$entry" | jq -c -r '.envFrom.secret // .envFrom.var // empty')" ]; then
                      echo "     Processing: env-file single"
                      item="$(echo "$entry" | jq -c -r '.envFrom')"
                      items="$(jq -n -c -r --argjson v "$item" '[ $v ]' | jq -c '.[]')"
                      itemsFrom="from-env-file"
                  elif [ -n "$(echo "$entry" | jq -c -r '.envFrom // empty')" ]; then
                      echo "     Processing: env-file"
                      items="$(echo "$entry" | jq -c -r '.envFrom // []' | jq -c '.[]')"
                      itemsFrom="from-env-file"
                  else
                      echo "     Processing: from-file"
                      item=""
                      if [ -n "$(echo "$entry" | jq -c -r '.secret // .var // empty')" ]; then
                          item="$(echo "$entry" | jq -c -r '{key, secret, var} | with_entries(select(.value != null))')"
                      fi

                      if [ -n "$item" ]; then
                          items="$(echo "$entry" | jq -c -r '.items // []' | jq -c -r --argjson v "$item" '. + [ $v ]' | jq -c '.[]')"
                      else
                          items="$(echo "$entry" | jq -c -r '.items // []' | jq -c '.[]')"
                      fi
                      itemsFrom="from-file"
                  fi

                  if [ -n "$items" ]; then
                      n="0"
                      while read -r item; do
                          n=$((n+1))
                          key=$(echo "$item" | jq -c -r ".key // .secret // .var // $n")
                          secret=$(echo "$item" | jq -c -r '.secret // empty')
                          var=$(echo "$item" | jq -c -r '.var // empty')
                          distFile=".secrets/$name/$key"
                          touch "$distFile"

                           if [ -n "$secret" ]; then
                               echo "$SECRETS_JSON" | jq -r --arg k "$secret" '.[$k]' > "$distFile"
                           elif [ -n "$var" ]; then
                               echo "$VARS_JSON" | jq -r --arg k "$var" '.[$k]' > "$distFile"
                           fi

                          echo "       Processing: $key $(stat --printf='%s' $distFile) bytes"
                          args+=(--"$itemsFrom"="$distFile")
                      done <<< "$items"
                  fi

                  echo "kubectl ${args[@]}"

                  args+=(--dry-run=client -o yaml)
                  MANIFEST=$(kubectl "${args[@]}")

                  # echo "" ; echo "--- ConfigMap $name manifest" ; echo "$MANIFEST" ; echo ""
                  echo "$MANIFEST" | ssh -p $REMOTE_PORT $REMOTE_USER@$REMOTE_HOST "kubectl apply -f - "
              done <<< "$(echo "$2" | jq -c '.[]')"
          }

          CONFIGMAPS="$(cat sync-job.json | jq -r '.configMaps // []')"
          SECRETS="$(cat sync-job.json | jq -r '.secrets // []')"

          process_entries "configMaps" "$CONFIGMAPS" || echo "!!! configmaps step fail"
          process_entries "secrets" "$SECRETS" || echo "!!! secrets step fail"

          rm -rf .secrets
